# Gegevensverwerking

Hier beschrijven we hoe we de verzamelde data verwerken tot input voor de Blokkendoos. De meeste van deze bewerkingen hebben we ondergebracht in Python-scripts die u ook in deze repository kunt vinden, in de map 'python'.

Merk op dat de benodigde libraries voor Python en hun versienummers gespecificeerd staan in het bestand 'environment.yml'. Zelf gebruiken wij Anaconda als Python-installatie en Visual Studio Code als ontwikkelomgeving. Om hierin een zgn. 'virtual environment' voor het project te maken, volg de onderstaande stappen:

```conda env create -f environment.yml```

En om de omgeving te activeren:

```conda activate blokkendoos```


## Stroomgebied bepalen per knelpunt
Verreweg de belangrijkste invoer voor de Blokkendoos is het stroomgebied wat behoort bij ieder bekend wateroverlastknelpunt. Wanneer dit stroomgebied bekend is kan de Blokkendoos talloze analyses uitvoeren, bijvoorbeeld om te berekenen welke oppervlaktes geschikt zijn voor implementatie van bepaalde maatregelen.

De methode om te komen tot een shapefile met een stroomgebied per knelpunt hebben we vastgelegd in een Python-script.

::: {.grid}
::: {.g-col-6}

* Naam: catchment_delineation.py
* Input:
    * Shapefile met knelpuntlocaties (let op: polygonen opgeven; niet punten!)
    * Naam van het veld wat het ID van ieder knelpunt bevat
    * Raster met hoogtewaarden. In verband met het grensoverschrijdend karakter hier gekozen voor het EU-DEM
    * Shapefile met de watergangen in de regio
* Output:
    * Shapefile met polygonen

We merken op dat de stroomgebieden van de diverse knelpunten vaak overlappen. Hierdoor zijn niet alle stroomgebieden direct zichtbaar op de kaart.

:::

::: {.g-col-6}

![Resultaat van Catchment Delineation in Python.](../static/img/knelpunten_catchments.png)

:::

:::







